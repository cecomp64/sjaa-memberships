// Configure your import map in config/importmap.rb. Read more: https://github.com/rails/importmap-rails
import "@hotwired/turbo-rails"
import "controllers"
import "bootstrap.bundle.min"

function loadScript(url, callback) {
  // Create a new script element
  var script = document.createElement('script');

  // Set the script's src attribute to the provided URL
  script.src = url;

  // Optional: Set the async attribute if you want the script to load asynchronously
  script.async = true;

  // Set the onload event handler to call the callback function
  script.onload = function () {
    if (callback) {
      callback();
    }
  };

  // Append the script to the document's head or body
  document.head.appendChild(script);
}

function loadPayPalButtons() {
  console.log('Executing custom function after Turbolinks load');
  var container = document.getElementById('paypal-button-container')
  if (container) {
    loadScript('https://www.paypal.com/sdk/js?client-id=<%=ENV['PAYPAL_CLIENT_ID']%>', () => {
      paypal.Buttons({
        env: 'sandbox', // Valid values are sandbox and live.
        createOrder: async () => {
          // Get the form element
          const form = document.getElementById('new_membership');

          // Create a FormData object from the form
          const formData = new FormData(form);

          // Send a POST request with the form data
          var response = await fetch(form.action, {
            method: 'POST',
            body: formData,
          });

          const responseData = await response.json();
          if (!responseData.token) {
            console.log(`Error: ${responseData.error}`);
          }

          return responseData.token;
        },

        onApprove: async (data) => {
          const response = await fetch('/memberships/capture_order', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ order_id: data.orderID })
          });

          const responseData = await response.json();

          if (responseData.status === 'COMPLETED') {
            var msg_container = document.getElementById('success-message');
            msg_container.classList.remove('d-none');
            console.log('Payment complete!');
            window.location.href = responseData.redirect;
          }
          else {
            console.log(`PayPal capture error: ${responseData.error}`);
            var errorDiv = document.getElementById('paypalErrors');
            errorDiv.innerHTML = `A PayPal Error Occurred: ${responseData.error} <br/>Please try again later`;
            errorDiv.classList.remove('d-none');
          }
        }
      }).render('#paypal-button-container');

    });
  }
}

document.addEventListener('turbo:load', function () {
  console.log('turbo loaded')
  loadPayPalButtons();
});